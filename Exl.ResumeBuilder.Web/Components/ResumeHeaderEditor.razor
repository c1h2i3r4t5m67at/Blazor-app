@using Exl.ResumeBuilder.Web.Data
@using Exl.ResumeBuilder.Web.Models.Resume
@using Exl.ResumeBuilder.Web.Services
@using Microsoft.Extensions.Logging
@inject ResumeService ResumeService

<EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Basic Information</h5>
            <p class="card-content">Your basic information is what organisations look at first....</p>
            <div class="form-row">
                <div class="col-sm-12 col-md-4 col-lg-3 text-center">
                    <div class="profile-image profile-image-editMode" alt="profile image" style="background-image: url('https://img.freepik.com/free-icon/user_318-875902.jpg?w=2000');"></div>
                </div>
                <div class="col-sm-12 col-md-8 col-lg-9">
                    <div class="form-row">
                        <div class="col-sm-12 mb-3">
                            <div class="input-group">
                                <InputText type="text" placeholder="Full Name" class="form-control" id="FullName" @bind-Value="Resume.FullName" />
                                <ValidationMessage For="@(() => Resume.FullName)" />
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="col-sm-12 mb-3">
                            <div class="input-group">
                                <InputText type="text" placeholder="Job Title" class="form-control" id="JobTitle" @bind-Value="Resume.JobTitle" />
                                <ValidationMessage For="@(() => Resume.JobTitle)" />
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="col-sm-12 mb-3">
                            <div class="input-group">
                                <InputText type="text" placeholder="Location" class="form-control" id="Location" @bind-Value="Resume.Location" />
                                <ValidationMessage For="@(() => Resume.Location)" />
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="col-sm-12 mb-3">
                            <div class="input-group">
                                <InputText type="text" placeholder="Email" class="form-control" id="Email" @bind-Value="Resume.Email" />
                                <ValidationMessage For="@(() => Resume.Email)" />
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="col-sm-12 mb-3">
                            <div class="input-group">
                                <InputText type="text" placeholder="Phone" class="form-control" id="Phone" @bind-Value="Resume.Phone" />
                                <ValidationMessage For="@(() => Resume.Phone)" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="col-sm-12 col-md-6 mt-3">
                    <button class="btn btn-primary" disabled="@(!hasChanges)" type="submit">Save Changes</button>
                </div>
            </div>
        </div>  
    </div>

</EditForm> 

@code {

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public CreateNewResumeDto Resume { get; set; }

    private EditContext? editContext;
    private bool hasChanges = false;

    protected override void OnInitialized()
    {
        editContext = new(Resume);
        editContext.OnFieldChanged += EditContext_OnFieldChanged;
    }

    private async void HandleValidSubmit()
    {
        await OnValidSubmit.InvokeAsync();
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        hasChanges = true;
    }
}
